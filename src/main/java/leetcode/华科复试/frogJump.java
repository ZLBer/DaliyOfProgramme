package leetcode.华科复试;

/**
 * Created by libin on 2019/3/2.
 */
public class frogJump {
    /*
     *
 首先我们仍然考虑最简单的情况。如果只有1级台阶，那显然只有一种跳法。如果有2级台阶，那就有两种跳法了：一种是分两次跳，每次跳1级；另外一种就是一次跳2级。
接着我们再来讨论一般的情况。把n级台阶时的跳法看成是n的函数f(n)。当n>2时，第一次跳的时候有n种不同的选择：

第一次只跳1级，此时跳上n级台阶的跳法数目等于后面剩下的n-1级台阶的跳法数目，即f(n-1)；
第一次跳2级，此时跳上n级台阶的跳法数目等于后面剩下的n-2级台阶的跳法数目，即f(n-2)；
第一次跳3级，此时跳上n级台阶的跳法数目等于后面剩下的n-3级台阶的跳法数目，即f(n-3)；
......；
第一次跳n-1级，此时跳上n级台阶的跳法数目等于后面仅剩的1级台阶的跳法数目，即f(1)；
从初始位置直接跳n级，这也对应了一种跳法

综上所述，n级台阶的不同跳法的总数 f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(1) + 1
把n-1带入上面的递推式得 f(n-1) = f(n-2) + f(n-3) + ... + f(1) + 1
所以最终的递推式为 f(n) = 2 * f(n-1)
。
     */

    public int climbStairs(int n) {
        int result = 1;
        if (n == 1) {
            return result;
        }
        for (int i = 2; i <= n; i++) {
            result *= 2;
        }
        return result;
    }
}
